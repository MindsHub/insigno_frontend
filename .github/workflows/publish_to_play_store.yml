name: Publish to Play Store
on: workflow_dispatch

env:
  # these directories are the same as in F-Droid's buildserver, ensuring reproducibility
  BUILD_DIR: /home/vagrant/build/org.mindshub.insigno
  PUB_CACHE: /home/vagrant/build/org.mindshub.insigno/.pub-cache
  # these are needed by fastlane
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  FLUTTER_ROOT: /home/vagrant/build/org.mindshub.insigno/submodules/flutter

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        # not using actions/checkout because it does not clone `.git`, required for Flutter
        run: |
          sudo mkdir -p "$BUILD_DIR"
          sudo chown runner "$BUILD_DIR"
          git clone --recurse-submodules "https://github.com/${{ github.repository }}.git" "$BUILD_DIR"
      - name: Setup Fastlane
        run: |
          cd "$BUILD_DIR"
          sudo apt install ruby ruby-dev
          sudo gem install bundler
          cp Gemfile Gemfile.lock android/
          cd "$BUILD_DIR/android"
          sudo bundle install
      - name: Extract version and version code
        run: |
          cd "$BUILD_DIR"
          echo "VERSION=$(sed -nE 's~^version: ?([^\+]+)\+(.*)$~\1~p' pubspec.yaml)" >> $GITHUB_ENV
          VERSION_CODE=$(sed -nE 's~^version: ?([^\+]+)\+(.*)$~\2~p' pubspec.yaml)
          echo "VERCODE_1=$(( $VERSION_CODE * 10 + 1 ))" >> $GITHUB_ENV
          echo "VERCODE_2=$(( $VERSION_CODE * 10 + 2 ))" >> $GITHUB_ENV
          echo "VERCODE_3=$(( $VERSION_CODE * 10 + 3 ))" >> $GITHUB_ENV
          BUILD_TOOLS_PATH=$($ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed | grep build-tools/ | tail -n 1 | sed -nE 's~^.*(build-tools/[^ \t]+).*$~\1~p')
          echo "APKSIGNER=$ANDROID_HOME/$BUILD_TOOLS_PATH/apksigner" >> $GITHUB_ENV
      - name: Print some information
        run: |
          echo "Version: ${{ env.VERSION }}"
          echo "Version codes: ${{ env.VERCODE_1 }}, ${{ env.VERCODE_2 }}, ${{ env.VERCODE_3 }}"
          echo "Build directory: $BUILD_DIR"
          echo "Android home: $ANDROID_HOME"
          echo "Chosen apksigner: ${{ env.APKSIGNER }}"
          echo "Available Android build-tools:" $(ls "$ANDROID_HOME/build-tools/" | xargs)
      - name: Setup flutter
        run: |
          cd "$BUILD_DIR"
          submodules/flutter/bin/flutter config --no-analytics
          submodules/flutter/bin/flutter pub get
      - name: Add signing config to app/build.gradle
        run: |
          cd "$BUILD_DIR/android/app"
          openssl base64 -A -d -out keystore.jks <<< "${{ secrets.SIGNING_KEYSTORE_BASE64 }}"
          echo >> ./build.gradle
          echo "android {"
          echo "    signingConfigs {" >> ./build.gradle
          echo "        release {" >> ./build.gradle
          echo "            keyAlias '${{ secrets.SIGNING_KEY_ALIAS }}'" >> ./build.gradle
          echo "            keyPassword '${{ secrets.SIGNING_KEYSTORE_PASSWORD }}'" >> ./build.gradle
          echo "            storeFile file('$BUILD_DIR/android/app/keystore.jks')" >> ./build.gradle
          echo "            storePassword '${{ secrets.SIGNING_KEYSTORE_PASSWORD }}'" >> ./build.gradle
          echo "        }" >> ./build.gradle
          echo "    }" >> ./build.gradle
          echo "    buildTypes {" >> ./build.gradle
          echo "        release {" >> ./build.gradle
          echo "            signingConfig signingConfigs.release" >> ./build.gradle
          echo "        }" >> ./build.gradle
          echo "    }" >> ./build.gradle
          echo "}" >> ./build.gradle
      - name: Build AAB
        run: |
          cd "$BUILD_DIR"
          submodules/flutter/bin/flutter build appbundle --release --build-number=${{ env.VERCODE_3 }} --build-name=${{ env.VERSION }}
      - name: Copy Fastlane metadata to correct directory
        run: |
          cd "$BUILD_DIR"
          cp -r fastlane/ android/
      - name: Create Google Play config file
        run: |
          cd "$BUILD_DIR/android"
          openssl base64 -A -d -out play_config.json <<< "${{ secrets.PLAY_STORE_CONFIG_BASE64 }}"
      - name: Run Fastlane to publish to Play Store and update metadata
        run: |
          cd "$BUILD_DIR/android"
          bundle exec fastlane run upload_to_play_store release_status:"draft" json_key:"play_config.json" aab:"../build/app/outputs/bundle/release/app-release.aab"
        